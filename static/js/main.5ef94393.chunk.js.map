{"version":3,"sources":["components/TodoList/TodoList.tsx","api/api.ts","components/CurrentUser/CurrentUser.tsx","App.tsx","index.tsx"],"names":["TodoList","todos","setSelectedId","useState","query","setQuery","serchedtodo","setSerchedTodo","selectedOption","setSelectedOption","useMemo","filter","todo","title","toLowerCase","includes","completed","className","type","value","onChange","event","target","id","placeholder","map","checked","readOnly","onClick","userId","request","url","fetch","then","response","json","CurrentUser","selectedId","setClearId","user","setUser","useEffect","data","name","email","phone","App","selectedUserId","setSelectedUserId","setTodos","todosFromServer","length","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.5ef94393.chunk.js","sourcesContent":["import React, { useState, useMemo } from 'react';\nimport './TodoList.scss';\n\ninterface Props {\n  todos: Todo[]\n  setSelectedId: (userId: number) => void;\n}\n\nexport const TodoList: React.FC<Props> = ({\n  todos, setSelectedId,\n}) => {\n  const [query, setQuery] = useState('');\n  const [serchedtodo, setSerchedTodo] = useState<Todo[]>([]);\n  const [selectedOption, setSelectedOption] = useState('all');\n\n  useMemo(() => setSerchedTodo(todos\n    .filter(todo => (\n      todo.title.toLowerCase().includes(query.toLowerCase())\n    ))\n    .filter(todo => {\n      if (selectedOption === 'active') {\n        return !todo.completed;\n      }\n\n      if (selectedOption === 'completed') {\n        return todo.completed;\n      }\n\n      return true;\n    })), [selectedOption, query, todos]);\n\n  return (\n    <div className=\"TodoList\">\n      <h2>Todos:</h2>\n      <input\n        type=\"text\"\n        value={query}\n        onChange={event => setQuery(event.target.value)}\n        id=\"search-query\"\n        className=\"TodoList_input\"\n        placeholder=\"Write the Title\"\n      />\n      <select\n        onChange={event => setSelectedOption(event.target.value)}\n        className=\"TodoList_section\"\n      >\n        <option value=\"all\">all</option>\n        <option value=\"active\">active</option>\n        <option value=\"completed\">completed</option>\n      </select>\n      <div className=\"TodoList__list-container\">\n        <ul className=\"TodoList__list\">\n          {serchedtodo.map(todo => (\n            <li\n              className={`TodoList__item ${todo.completed ? 'TodoList__item--checked' : 'TodoList__item--unchecked'}`}\n              key={todo.id}\n            >\n              <label>\n                <input type=\"checkbox\" checked={todo.completed} readOnly />\n                <p>{todo.title}</p>\n              </label>\n              <button\n                onClick={() => setSelectedId(todo.userId)}\n                className=\"TodoList__user-button button\"\n                type=\"button\"\n              >\n                User&nbsp;\n                {todo.userId}\n              </button>\n            </li>\n          ))}\n        </ul>\n      </div>\n    </div>\n  );\n};\n","const BASE_URL = 'https://mate.academy/students-api';\n\nconst request = (url: string) => {\n  return fetch(`${BASE_URL}${url}`)\n    .then(response => response.json());\n};\n\nexport const getTodos = () :Promise<Todo[]> => request('/todos');\n\nexport const getUsersById = (userId: number) :Promise<User> => request(`/users/${userId}`);\n","import React, { useEffect, useState } from 'react';\nimport { getUsersById } from '../../api/api';\nimport './CurrentUser.scss';\n\ninterface Props {\n  selectedId: number;\n  setClearId: (userId: number) => void;\n}\n\nexport const CurrentUser: React.FC<Props> = ({ selectedId, setClearId }) => {\n  const [user, setUser] = useState<User>();\n\n  useEffect(() => {\n    getUsersById(selectedId)\n      .then(data => setUser(data));\n  }, [selectedId]);\n\n  return (\n    <div className=\"CurrentUser\">\n      <h2 className=\"CurrentUser__title\">\n        <span>{`Selected user: ${selectedId}`}</span>\n      </h2>\n\n      <h3 className=\"CurrentUser__name\">{user?.name}</h3>\n      <p className=\"CurrentUser__email\">{user?.email}</p>\n      <p className=\"CurrentUser__phone\">{user?.phone}</p>\n\n      <button\n        type=\"button\"\n        className=\"TodoList__user-button button\"\n        onClick={() => setClearId(0)}\n      >\n        Clear\n      </button>\n    </div>\n  );\n};\n","import React, { useState, useEffect } from 'react';\nimport './App.scss';\nimport './styles/general.scss';\nimport { TodoList } from './components/TodoList';\nimport { CurrentUser } from './components/CurrentUser';\nimport { getTodos } from './api/api';\n\nconst App: React.FC = () => {\n  const [selectedUserId, setSelectedUserId] = useState(0);\n  const [todos, setTodos] = useState<Todo[]>([]);\n\n  useEffect(() => {\n    getTodos()\n      .then(todosFromServer => {\n        setTodos(todosFromServer);\n      });\n  }, []);\n\n  return (\n    <div className=\"App\">\n      <div className=\"App__sidebar\">\n        {todos.length > 0\n          ? (\n            <TodoList\n              todos={todos}\n              setSelectedId={setSelectedUserId}\n            />\n          ) : (\n            <h2>Todos is Loading</h2>\n          )}\n      </div>\n\n      <div className=\"App__content\">\n        <div className=\"App__content-container\">\n          {selectedUserId\n            ? (\n              <CurrentUser\n                selectedId={selectedUserId}\n                setClearId={() => setSelectedUserId(0)}\n              />\n            ) : (\n              <h3>\n                No user selected\n              </h3>\n            )}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n","import ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}